#
# This is a config file for Dragonfly's _multiedit.py command-module.
#  To use this config, you must rename this file to _multiedit.txt and
#  place it in the same directory as the _multiedit.py file.
#

# Pull in all of Dragonfly's action objects so that we can use them here.

from dragonfly import *


#---------------------------------------------------------------------------
# Here we define the release action which releases all
#  modifier-keys used within this grammar.  It is defined here
#  because this functionality is used in many different places.
#  Note that it is harmless to release ("...:up") a key multiple
#  times or when that key is not held down at all.

release = Key("shift:up, ctrl:up")


#---------------------------------------------------------------------------
# Here we define the single-action commands.  These can be spoken
#  in series so as to execute multiple actions within a single utterance.

cmd.map = {
	# Spoken-form    ->    ->    ->     Action object

	"[<n>] up":                         Key("k:%(n)d"),
	"[<n>] down":                       Key("j:%(n)d"),
	"[<n>] left":                       Key("h:%(n)d"),
	"[<n>] right":                      Key("l:%(n)d"),
	"go up [<n>]":                    Key("c-b:%(n)d"),
	"go down [<n>]":                  Key("c-f:%(n)d"),
	"up <n> (page | pages)":            Key("pgup:%(n)d"),
	"down <n> (page | pages)":          Key("pgdown:%(n)d"),
	"left <n> (word | words)":          Key("c-left:%(n)d"),
	"right <n> (word | words)":         Key("c-right:%(n)d"),
	"hat":                              Key("caret"),
	"dollar":                           Key("dollar"),
	"doc home":                         Key("c-home"),
	"doc end":                          Key("c-end"),

	"next": Key("n"),
	"previous": Key("N"),
	"[<n>] back": Key("b:%(n)d"),
	"[<n>] whiskey": Key("w:%(n)d"),
	"[<n>] ech": Key("e:%(n)d"),

	"Center": Key("z,dot"),

	"space [<n>]":                      Key("space:%(n)d"),
	"[<n>] slap":                       Key("enter:%(n)d"),
	"[<n>] tab":                        Key("tab:%(n)d"),
	"[<n>] X.":            	       Key("x:%(n)d"),
	"[<n>] backspace":                  Key("backspace:%(n)d"),

	"kay":                              Key("escape"),

	"oh":                               Key("o"),
	"p oh":                         Key("O"),

	"D.":                       Key("d"),
	"change":                       Key("c"),
	"undo":                       Key("u"),
	"insert":                       Key("i"),

	"yank":                             Key("y"),
	"p yank":                       Key("Y"),

	"paste":                            Key("p"),
	"p paste":                      Key("P"),

	"say <text>":                       release + Text("%(text)s"),
	"mimic <text>":                     release + Mimic(extra="text"),
}


#---------------------------------------------------------------------------
# Here we define various functions for formatting text.
# Each of these functions must have a docstring which defines its
#  spoken-form.  This docstring must include the "<dictation>" extra.
#  See below for various examples.

# Format: some_words
def format_score(dictation):          # Function name must start with "format_".
    """ score <dictation> """         # Docstring defining spoken-form.
    text = str(dictation)             # Get written-form of dictated text.
    return "_".join(text.split(" "))  # Put underscores between words.

# Format: some_words()
def format_under_function(dictation):
    """ under func <dictation> """
    text = str(dictation)
    return "_".join(text.split(" ")) + "()"

# Format: SomeWords
def format_studley(dictation):
    """ studley <dictation> """
    text = str(dictation)
    words = [word.capitalize() for word in text.split(" ")]
    return "".join(words)

# Format: somewords
def format_one_word(dictation):
    """ [all] one word <dictation> """
    text = str(dictation)
    return "".join(text.split(" "))

# Format: SOMEWORDS
def format_upper_one_word(dictation):
    """ one word upper <dictation> """
    text = str(dictation)
    words = [word.upper() for word in text.split(" ")]
    return "".join(words)

# Format: SOME_WORDS
def format_upper_score(dictation):
    """ upper score <dictation> """
    text = str(dictation)
    words = [word.upper() for word in text.split(" ")]
    return "_".join(words)

# Format: someWords
def format_java_method(dictation):
    """ Java method <dictation> """
    text = str(dictation)
    words = text.split(" ")
    return words[0] + "".join(w.capitalize() for w in words[1:])
